# Configuration for mapping keys in older metadata files to our new template


## Configuration File Layout

#    The "format" section tells the mapper which new template to use, what keys to
# look for in it or in the old metadata files, and in some cases, what section tags
# to look for later in this config file. 

#    The "categories" section tells the the mapper how to identify which kind of data
# and metadata to we're looking at. It lists regular expressions to apply to an archive
# directory path that will determine the category of metadata.

#    The "doc names" section tells the mapper which specific metadata filenames to look
# for. The filenames are the values in this section. The keys are later combined with the
# category found above to create a "section" tag for each combination of category and 
# metadata file.

#    The "section tags" is actually a group of sections. As mentioned above, Each one is
# a combination of a category and a metadata filename that tells the mapper how to parse
# that specfic kind of file and map its values into the new template.

#    The "dates" section tells the mapper what date keys to look for and how to format
# dates in the new template.

#    Lastly, the "default vals" section tells the mapper both what to assign to fields for
# which no data was found, as well as what data types all values in the new template must
# have, whether data was found for them not. 



####  FORMAT  ####

[format]
# the new template MUST be located in the same directory as this config file.
template = master_template.json

# The user_metadata key, if set to True in any of the section tags, will tell the mapper
# to include the entire document as the "user_metadata" field in the mew template.
user_metadata_key = user_metadata

# The defaults tag tells the mapper which seciton to look in for default values to be 
# applied in each new document being generated.
defaults_tag = default_vals

# The manager userid has to be looked up in the system groups finder, but the key
# can have a different name in our template than it does in the SGF's config.
manager_user_id_key = manager_user_id
user_id_key = user_id
sgf_manager_user_id_key = userid

# The source path ley gives the name of the source path key in the new template.
source_path_key = source_path

# If an archived path isn't in the metadata, we might be able to just use the given
# directory name as the archived path, if it's actually in the archive. We establish 
# that by checking that it starts with the archive root. If so, we can also set the
# artchival_status to done. The exact string for "done" is also configurable. In this
# case, it's set to "completed".
 
archive_path_key = archived_path
archive_root = /archive
archival_status_key = archival_status
archival_status_done_msg = completed

# We'll look for the date the directory was archived in the metadata, but if it's not 
# present, we may have to add the date programmatically
date_key = date_archived

# The archived_size will definitely be added programmatically. WE MUST IGNORE THE 
# archived_size IN EXISTING METADATA FILES, BECAUSE IT WAS  INCORRECTLY WRITTEN IN
# BLOCKS INSTEAD OF BYTES.
archived_size_key = archived_size

# The system_groups key is it's own special case, telling the mapper to use the system
# groups finder.
system_groups_key = system_groups

# Some filenames contain a directory name, so the "dirname" string will need to be
# expanded to the actual directory name.
dirname_key = dirname



####  CATEGORIES ####

# There are different kinds of metadata in legacy, GT, singlecell, microscopy, etc. 
# The mapper must parse the given directory path to establish the category. If the path 
# matches one of the patterns in this section, it will be assigned the given category.

[categories]
/archive/GT/[0-9]{4} = gt
/archive/GT/amplidata_legacy = legacy
/archive/GT/aws_legacy = legacy
/archive/GT/legacy/(?!pacbio) = legacy
/archive/GT/legacy/pacbio = legacy_pacbio
/archive/services/microscopy = microscopy
/archive/services/singlecell/shares = singlecell
/archive/faculty = faculty
/shares/bh-microscopy = microscopy
/shares/ct-microscopy = microscopy

# We will skip any directories that match one of the excldue patterns.
exclude_patterns = \.old



####  DOC NAMES ####

# The doc names are the metadata documents the mapper will look for in a given
# directory. If found, it will read them, and use their values to populate the fields
# of the template.

[doc_names]
gt_metadata = gt-metadata.json
metadata = metadata.json
archived_json = archived.json

# There are odd cases, specifically for the 373 directories beneath 
# /archive/faculty/verhar-lab/amins/2019-11-12, where the metadata filename
# includes the directory name. I.e, i_E2CD-T1-A2-J01_metadata.json. 
# To keep the code kluges to a minimum, we'll just make a separate tag for those.

dirname_metadata = dirname_metadata.json



####  DATES ####

# Some template keys will refer to a date. Values will need to be converted to a 
# specific format
[dates]
date_key_pattern = ^when|^date
date_format = %%Y-%%m-%%d



####  SECTION TAGS  ####

# These are the instructions for mapping values in fields of each kind of old
# metadata to values in the new template.
# Values containing a '>' denote nested dictionaries within the old json files
# that will be parsed on their own.

[faculty_metadata]
classification = classification, data_classification, meta_doc > classification
grant_id = grant_id, meta_doc > grant_id
manager_user_id = manager_name, meta_doc > manager_user_id
project_name = project_name, meta_doc > project_name 
source_size = source_size
source_path = source_folder_path, meta_doc > source_folder_path 
user_metadata = True
user_id = manager_name, meta_doc > manager_user_id


[faculty_dirname_metadata]
classification = data_classification
grant_id = grant_id
manager_user_id = manager_user_id
project_name = project_name
source_size = source_folder_size
source_path = source_folder_path
user_metadata = True
user_id = manager_user_id


# Each section below tells the mapper which fields to try to get from which file.
[gt_gt_metadata]
manager_user_id = project > pi
notes = project > notes
project_name = project > customer_project_name_id
source_path = project > delivery_path
user_metadata = True
user_id = project > pi


[gt_archived_json]
archived_path = archived_path
date_archived = date_archived
source_size = source_folder_size

[gt_metadata]
classification = data_classification
grant_id = grant_id
manager_user_id = manager_user_id
source_size = source_size
source_path = source_folder_path
user_id = manager_user_id
user_metadata = True
date_archived = date_archived


[legacy_metadata]
archived_path = archived_path
grant_id = grant_id
manager_user_id = investigator_id
project_name = gt_project_name
source_size = source_folder_size
source_path = delivery_path
user_metadata = True
date_archived = date_archived


[legacy_pacbio_metadata]
archived_path = archived_path
manager_user_id = investigator_name
source_size = source_folder_size
source_path = delivery_path
user_id = investigator_name
user_metadata = True


[microscopy_metadata]
manager_user_id = lab,fs_lab
project_name = project
source_path = path,fs_path
user_id = lab,fs_lab
user_metadata = True


[singlecell_metadata]
classification = data_classification
grant_id = grant_id
manager_user_id = manager_user_id,fs_lab,lab
project_name = project
source_path = path,fs_path
source_size = source_size
user_id = manager_user_id,fs_lab,lab
user_metadata = True
date_archived = date_archived



####  DEFAULT VALS ####

# Constants will be used for fields that weren't yet populated. The values will be
# parsed and assigned the types preceding the colon (though ints and floats will be assigned
# to None where unavailable. 
# For fields that were populated, data types below will be enforced, recasting as necessary.
[default_vals]
archival_status = str:None
archived_size = int:None
classification = str:None
date_archived = str:None
grant_id = str:None
manager_user_id = str:None
notes = str:None
project_name = str:None
source_path = str:None
source_size = int:None
submission = dict:None
submitter = dict:None
system_groups = list:None
user_id = str:None
user_metadata = dict:None

# Old place holder values in the metadata will need to be replaced with the above defaults.
[replace_vals]
vals_to_replace = dnf,na,none,null
